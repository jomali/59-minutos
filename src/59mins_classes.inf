

!!==============================================================================
!!
!!	59 MINUTOS
!!	Definición de clases y atributos
!!
!!==============================================================================
!!
!!	File:			59mins_classes.inf
!!	Author(s):		J. Francisco Martín <jfm.lisaso@gmail.com>
!!	Languague:		ES (Castellano)
!!	System:			Inform-INFSP 6
!!	Platform:		Máquina-Z / GLULX
!!	Version:		1.0
!!	Released:		2014/03/05
!!
!!------------------------------------------------------------------------------
!!
!!	# HISTORIAL DE VERSIONES
!!
!!	1.0: 2014/03/05	Clases implementadas: Room, Thing, Item, Furniture, 
!!					Atrezzo, NPC, SmartEnterable, TextSequence.
!!
!!------------------------------------------------------------------------------
!!
!!	Este archivo forma parte de 59 MINUTOS.
!!
!!	59 MINUTOS es software libre: usted puede redistribuirlo y/o
!!	modificarlo bajo los términos de la Licencia Pública General GNU
!!	publicada por la Fundación para el Software Libre, ya sea la versión
!!	3 de la Licencia, o (a su elección) cualquier versión posterior.
!!
!!	59 MINUTOS se distribuye con la esperanza de que sea útil, pero
!!	SIN GARANTÍA ALGUNA; ni siquiera la garantía implícita MERCANTIL o
!!	de APTITUD PARA UN PROPÓSITO DETERMINADO. Consulte los detalles de
!!	la Licencia Pública General GNU para más información.
!!
!!	Debería haber recibido una copia de la Licencia Pública General GNU
!!	junto a 59 MINUTOS. En caso contrario, consulte
!!	<http://www.gnu.org/licenses/>.
!!
!!	Copyright (c) 2014, J. Francisco Martín
!!
!!------------------------------------------------------------------------------


!!==============================================================================
!!	Definición de atributos y clases
!!------------------------------------------------------------------------------
!!	*NOTA sobre las propiedades de clase:* Hay rutinas como before o 
!!	react_before que son propiedades no aditivas. Es decir, si se crea una 
!!	clase que defina un comportamiento específico para una de esas propiedades, 
!!	y a continuación un objeto como instancia de esta clase de forma que 
!!	también él defina su propia versión de esas propiedades no aditivas, las 
!!	rutinas del objeto "sobreescribirán" completamente aquéllas de la clase. 
!!	Dicho de otra forma, si el objeto define las suyas propias, las rutinas 
!!	before o react_before de la clase de la que es instancia NO SERÁN INVOCADAS 
!!	en ningún momento. Sin embargo, se puede hacer una llamada explícita a la 
!!	rutina de la clase desde la rutina del objeto. Ej. de un objeto invocando a 
!!	la rutina react_before de la clase a la que instancia:
!!
!!		objectName.className::react_before();
!!------------------------------------------------------------------------------

!!------------------------------------------------------------------------------
!! Marca un objeto como destacado. El jugador puede utilizar la acción 
!! ##RemarkableObjects para obtener un listado de objetos destacados a su 
!! alcance con los que puede interactuar de una forma especial.
!!------------------------------------------------------------------------------
Attribute remarkable;

!!------------------------------------------------------------------------------
!! Representa un objeto localidad dentro del modelo de mundo.
!!------------------------------------------------------------------------------
Class	Room
 with	description [;
			if (action == ##Look || self hasnt visited) self.long_description();
			else self.short_description();
			!! Espacio para elementos comunes a las dos descripciones.
			return true;
		],
		long_description "EN CONSTRUCCIÓN.",
		!! Por defecto, la descripción corta es la misma descripción larga.
		short_description [; return self.long_description(); ],
		!! XXX - Si se activa, se inhibe el listado automático de objetos 
		!! simples al imprimir la descripción de la localidad (ver 
		!! comportamiento de ##Look en "1973_langLM.inf").
		inhibit_object_list false,
 has	light;

!!------------------------------------------------------------------------------
!! Representa un objeto físico no localidad dentro del modelo de mundo, con un 
!! tamaño, volumen y peso específicos, así como diferentes valores de capacidad 
!! como potencial contenedor para otros objetos. Ideado como una suerte de 
!! clase abstracta sobre la que definir otras subclases de objetos más 
!! concretas; es decir, no está pensada para implementar directamente objetos 
!! 'Thing' dentro del relato.
!!------------------------------------------------------------------------------
Class	Thing
 with	size	0,			! Tamaño
		volume	0,			! Volumen
		weight	0,			! Peso
		capacity_number	-1,	! Capacidad total: número de objetos
		capacity_size	-1,	! Capacidad total: tamaño
		capacity_volume	-1,	! Capacidad total: volumen
		capacity_weight	-1,	! Capacidad total: peso
		description [;
			switch (GRAMMATICAL_INFLECTION) {
				1:	print "No veo ";
				2:	print "No ves ";
				3:	print "No ve ";
				4:	print "No vi ";
				5:	print "No viste ";
				6:	print "No vio ";
			}
			"nada especial en ", (the) self, ".";
		];

!!------------------------------------------------------------------------------
!! Representa un objeto simple dentro del modelo de mundo sobre el que 
!! inicialmente no se aplican restricciones de ningún tipo.
!!------------------------------------------------------------------------------
Class	Item
 class	Thing
 with	description [;
			switch (GRAMMATICAL_INFLECTION) {
				1,2,3:	print "Tiene", (n) self;
				4,5,6:	print "Tenía", (n) self;
			}
			print " el mismo aspecto que cual";
			if ( self has pluralname ) print "esquiera otr";
			else print "quier otr";
			print (o) self, " ", (name) self, " ";
			switch (GRAMMATICAL_INFLECTION) {
				1:	"que haya visto antes.";
				2:	"que hayas visto antes.";
				3:	"que haya visto antes.";
				4:	"que hubiese visto antes.";
				5:	"que hubieses visto antes.";
				6:	"que hubiese visto antes.";
			}
		];

!!------------------------------------------------------------------------------
!! Representa un objeto estático dentro del modelo de mundo. Se aplica la 
!! restricción 'static' definida por la librería Inform.
!!------------------------------------------------------------------------------
Class	Furniture
 class	Thing,
 with	before [;
			Pull, Push, PushDir, Take, Turn:
				switch (GRAMMATICAL_INFLECTION) {
					1,2,3:	print (The) self, " ", (es) self;
					4,5,6:	print (The) self, " era", (n) self;
				} " demasiado pesad", (o) self, " para andar moviéndol",
				(o) self, ".";
		],
 has	static;

!!------------------------------------------------------------------------------
!! Representa un objeto decorado dentro del modelo de mundo. Se aplica la 
!! restricción 'scenery' definida por la librería Inform.
!!------------------------------------------------------------------------------
Class	Atrezzo
 class	Thing
 has	scenery;

!!------------------------------------------------------------------------------
!! Representa un personaje no jugador. Hay algunas librerías para manejar 
!! conversaciones que definen una nueva clase con la que representar personajes 
!! (por ejemplo "gtalk.h" de Greg Boettcher, Krister Fundin y Mark J. Tilford, 
!! para manejar conversaciones por medio de menús, define la clase 'Character'). 
!! Se puede reutilizar la clase definida en una librería externa dentro de NPC 
!! convirtiendo esta última en una subclase de aquella definida en la librería 
!! externa. Por ejemplo:
!!
!!		Class NPC
!!			class Thing
!!			class Character ! Definida en la librería "gtalk.h"
!!			[...]
!!		;
!!------------------------------------------------------------------------------
Class	NPC
 class	Thing
 with	life [;
			Answer, Ask, AskFor, Order, Tell:
				print_ret (parser) "Para iniciar una conversación usa 
				simplemente la orden HABLA (a/con) PERSONAJE.";
		],
		before [;
			DefaultAction:
				if (self has described)
					<<TalkTo self>>;
		],
 has	animate;


!!------------------------------------------------------------------------------
!! Representa un objeto al que el jugador puede entrar o subirse encima.
!!------------------------------------------------------------------------------
Class	SmartEnterable
 with	react_before [; if (parent(player) ~= self) return false;
			!! GROUP 2 ACTIONS: Usually work, given the right circumstances.
			Close, Open:
				if (noun hasnt openable) return false;
				if (self.out_of_reach(noun))
					{ <Exit self>; new_line; }
				return false;
			Disrobe, Wear:
				if (noun hasnt clothing) return false;
				<Exit self>; new_line;
				return false;
			Drop:
				if (self has container) return false;
				if ((noun == player) || (parent(noun) ~= player)) return false;
				if (self.drop_on_object == 0) move noun to self;
				else move noun to self.drop_on_object;
				if (keep_silent == 0) print "Dejad", (o) noun, ".^";
				return true;
			Eat:
				if (noun hasnt edible) return false;
				if (self.out_of_reach(noun))
					{ <Exit self>; new_line; }
				return false;
			Empty, Remove, Search, Take:
				if (self.out_of_reach(noun))
					{ <Exit self>; new_line; }
				return false;
			EmptyT: !! TODO - Comprobar funcionamiento
				if (ObjectIsUntouchable(noun, 1)) return false;
				if (self.out_of_reach(second))
					{ <Exit self>; new_line; }
				return false;
			!Enter:
			!Examine:
			!Exit:
			!GetOff:
			!Give:
			Go:
				!! TODO - Habría que corregir el comportamiento si se 
				!! implementa un sistema de movimiento no basado en puntos 
				!! cardinales. (Ej: IR A <LOCALIDAD>)
				if (~~(noun ofclass CompassDirection)) return false;
				<Exit self>; new_line;
				return false;
			!GoIn:
			Insert, PutOn:
				if ((second == d_obj) || (player in second)) <<Drop noun>>;
				if (self.out_of_reach(second))
					{ <Exit self>; new_line; }
				return false;
			!Inv:
			!InvTall:
			!InvWide:
			Lock, Unlock:
				if (noun hasnt lockable) return false;
				if (self.out_of_reach(noun))
					{ <Exit self>; new_line; }
				return false;
			!Look:
			!Open:		Ver ##Close
			!Order:
			!PutOn:		Ver ##Insert
			!Remove:	Ver ##Empty
			!Search:	Ver ##Empty
			!Show:
			SwitchOff, SwitchOn:
				if (noun hasnt switchable) return false;
				if (self.out_of_reach(noun))
					{ <Exit self>; new_line; }
				return false;
			!SwitchOn:	Ver ##SwitchOff
			!Take:		Ver ##Empty
			!Transfer:
			!Unlock:	Ver ##Lock
			!VagueGo:
			!Wear:		Ver ##Disrobe
			!! GROUP 3 ACTIONS: Output a message and stop at the "before" stage.
			!Answer:
			!Ask:
			!AskFor:
			Attack, Blow, LookUnder, Smell, Squeeze, Taste, Touch:
				if (self.out_of_reach(noun))
					{ <Exit self>; new_line; }
				return false;
			!Blow:		Ver ##Attack
			!Burn:
			!Buy:
			Climb:
				if (noun hasnt enterable) return false;
				if (self.out_of_reach(noun))
					{ <Exit self>; new_line; }
				return false;
			!Consult:
			!Cut:
			!Dig:
			!Drink:
			!Fill:
			Jump:
				if (noun has supporter) <<Exit self>>;
				return false;
			!JumpOver:
			!Kiss:
			!LetGo:
			!Listen:
			!LookUnder:	Ver ##Attack
			!Mild:
			!No:
			!Pray:
			Pull, Push, Turn:
				!! TODO - Comprobar mensaje al empujar objetos scenery o static
				if (noun has scenery or static) return false;
				if (self.out_of_reach(noun))
					{ <Exit self>; new_line; }
				return false;
			!Push:		Ver ##Pull
			!PushDir:
			!Receive:
			!Rub:
			!Set:
			!SetTo:
			!Sing:
			!Sleep:
			!Smell:		Ver ##Attack
			!Sorry:
			!Squeeze:	Ver ##Attack
			!Strong:
			!Swim:
			Swing:
				if (noun has supporter) <<Swing self>>;
				return false;
			!Taste:		Ver ##Attack
			!Tell:
			!Think:
			!ThrowAt:
			!Tie:
			!Touch:		Ver ##Attack
			!Turn:		Ver ##Pull
			!Wait:
			!Wake:
			!WakeOther:
			!Wave:
			!WaveHands:
			!Yes:
			!! CUSTOM ACTIONS
			!Dance:
			GoDown:
				if (self has supporter) <<Exit self>>;
				return false;
			!GoUp:
			!KnockOn:
			!Masturbate:
			!Sit:
			!SleepWith:
			StandUp:
				if ((self has supporter) && (noun == nothing or self))
					<<Exit self>>;
			TalkTo:
				if (noun hasnt animate) return false;
				if (self.out_of_reach(noun))
					{ <Exit self>; new_line; }
				return false;
			!TalkTo:
			!Untie:
			!Use:
			!Write:
			!Xyzzy:
		],
		after [;
			Exit:
				if (keep_silent == 0) {
					if (self has supporter) {
						switch (GRAMMATICAL_INFLECTION) {
							1: print "Me bajo";
							2: print "Te bajas";
							3: print "Se baja";
							4: print "Me bajé";
							5: print "Te bajaste";
							6: print "Se bajó";
						}
					} else {
						switch (GRAMMATICAL_INFLECTION) {
							1: print "Salgo";
							2: print "Sales";
							3: print "Sale";
							4: print "Salí";
							5: print "Saliste";
							6: print "Salió";
						}
					}
					print " ", (del) self, ".^";
				}
				return true;
		],
		!! Objetos al alcance desde el SmartEnterable:
		reach_objects 0,
		!! Objeto destino de la acción ##Drop estando en el SmartEnterable:
		drop_on_object 0,
 private
		!! Dado un objeto como parámetro, retorna su antecesor más lejano 
		!! previo a los objetos localidad. (En el árbol de objetos del modelo 
		!! de mundo, los objetos localidad ocuparían el nivel 1 del árbol 
		!! mientras que el resultado de la rutina ocuparía el nivel 2).
		!!
		!! Tendría sentido implementar top_holder como una rutina independiente 
		!! en lugar de una propiedaad privada de una clase, sin embargo se deja 
		!! así por no dispersar código. (Su funcionalidad no se necesita en 
		!! ningún otro lugar).
		top_holder [ obj i;
			!print "** top_holder de ", (name) obj, ": ";
			while (parent(obj) ~= 0) {
				i = ObjectScopedBySomething(obj);
				if (i == 0) i = parent(obj);
				if (parent(i) == 0) break;
				obj = i;
			}
			!print (name) obj, ".^";
			return obj;
		],
		!! Indica si el objeto pasado como parámetro se encuentra fuera de 
		!! alcance desde el SmartEnterable. Retorna verdadero si el objeto está 
		!! fuera de alcance, falso en caso contrario. [Código adaptado de la 
		!! librería OutOfRch.h v2.00, de Marnie Parker <doeadeer3@aol.com>].
		out_of_reach [ obj 		top x y i;
			!! Se comprueba si el objeto se encuentra fuera de la localidad o 
			!! en el interior de un contenedor cerrado:
			if (ObjectIsUntouchable(obj, true)) return false;
			!! Se comrpueba si el objeto se encuentra en el jugador o en el 
			!! propio SmartEnterable:
			if (IndirectlyContains(player, obj)) return false;
			if (IndirectlyContains(self, obj)) return false;
			!! Se comprueba si el objeto es o se encuentra contenido en alguno 
			!! de los reach_objects definidas:
			top = self.top_holder(obj);
			if (metaclass(self.&reach_objects-->0) == Routine) {
				x = self.reach_objects();
				if (x == top) return false;
			}
			if (metaclass(self.&reach_objects-->0) == Object or Class) {
				y = self.#reach_objects;
				for (i = 0 : i < (y/2) : i++) {
					x = self.&reach_objects-->i;
					if (x == top) return false;
				}
			}
			!! El objeto se encuentra fuera del alcance:
			return true;
		],
 has	enterable;

!!------------------------------------------------------------------------------
!! Clase para representar secuencias de texto. Los objetos TextSequence pueden 
!! ejecutar o imprimir una serie de rutinas o cadenas de texto de manera 
!! secuencial, con una espera de pulsación de tecla entre ellas antes de 
!! continuar. Si el jugador pulsa 'q' se dejan de realizar pausas y se imprime 
!! el resto de la secuencia. [Código adaptado de la librería Cortos.h v2.0].
!!------------------------------------------------------------------------------
Class	TextSequence
 with	display [ flag i;
			if ((self provides description) && (self.description ~= 0)) {
				for (i=0 : i<(self.#description)/WORDSIZE : i++) {
					if (i ~= 0) new_line;
					if (metaclass(self.&description-->i) == String) {
						print (string) self.&description-->i;
						new_line;
					}
					else if (metaclass(self.&description-->i) == Routine)
						indirect(self.&description-->i);
					else break;
					if ((self hasnt general) && ~~(flag))
						flag = press_any_key();
				}
			}
		],
 has	proper general;


